configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: 'com.beolnix.marvin', name: 'marvin-api', version: MARVIN_API_VERSION, changing: true
    compile project(':im-sessions:marvin-irc-im-session')
    compile project(':im-sessions:marvin-skype-im-session')
    compile project(':im-sessions:marvin-telegram-im-session')
    compile project(':im-sessions:marvin-slack-im-session')

    compile project(':plugin-providers:marvin-osgi-plugin-provider')

    compile "com.beolnix:args-parser:0.3"
    compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"    

    compile "org.springframework:spring-core:${SPRING_VERSION}"
    compile "org.springframework:spring-beans:${SPRING_VERSION}"
    compile "org.springframework:spring-context:${SPRING_VERSION}"
    compile "org.springframework:spring-oxm:${SPRING_VERSION}"

    compile "javax.xml:jaxb-impl:${JAXB_VERSION}"
    compile "javax.xml:jaxb-api:${JAXB_VERSION}"
    compile 'com.google.guava:guava:19.0'

    compile "log4j:log4j:${LOG4J_VERSION}"

    testCompile "junit:junit:${JUNIT_VERSION}"
    testCompile "org.springframework:spring-test:${SPRING_VERSION}"
}

jar {
    def  cp  = ""
    configurations.runtime.resolve().flatten() { File file
    -> file.name }.unique().each { aJar ->  cp = cp + " lib/$aJar" }

    manifest {
        attributes 'Main-Class': 'com.beolnix.marvin.App', 'Class-Path' : cp, 'Implementation-Version' : version

    }
}

task copyToLib(dependsOn: configurations.runtime, type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}
